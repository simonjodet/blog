(function(e){function t(t){for(var n,i,r=t[0],l=t[1],h=t[2],c=0,d=[];c<r.length;c++)i=r[c],a[i]&&d.push(a[i][0]),a[i]=0;for(n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n]);u&&u(t);while(d.length)d.shift()();return s.push.apply(s,h||[]),o()}function o(){for(var e,t=0;t<s.length;t++){for(var o=s[t],n=!0,r=1;r<o.length;r++){var l=o[r];0!==a[l]&&(n=!1)}n&&(s.splice(t--,1),e=i(i.s=o[0]))}return e}var n={},a={app:0},s=[];function i(t){if(n[t])return n[t].exports;var o=n[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=e,i.c=n,i.d=function(e,t,o){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},i.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(i.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(o,n,function(t){return e[t]}.bind(null,n));return o},i.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/";var r=window["webpackJsonp"]=window["webpackJsonp"]||[],l=r.push.bind(r);r.push=t,r=r.slice();for(var h=0;h<r.length;h++)t(r[h]);var u=l;s.push([0,"chunk-vendors"]),o()})({0:function(e,t,o){e.exports=o("56d7")},"0253":function(e,t){e.exports="**ARCHIVE**\n\nHi all,\n\nFirst of all, if you're not a PHP developer, don't read this.\n\nThis post will be about my tries and misses with [TDD](http://en.wikipedia.org/wiki/Test-driven_development). To make things harder, I'm adding into the mix [PHPUnit](http://www.phpunit.de/manual/3.6/en/index.html) (of which I have minimal knowledge), [namespaces](http://www.php.net/manual/en/language.namespaces.php) (because I'm also a JavaScript developer and I feel at home now) and [Jenkins](http://jenkins-ci.org/) (fka Hudson).\n\nFirst of all and against all odds, TDD is fun! I swear, I really enjoy it. And adding Jenkins multiply the fun because you can gloat, showing off you 100% test coverage, your sky-rocketing test count, etc.\n\nNow, I wouldn't write a post just to say TDD is fun. Anyway TDD becomes fun and worthy of the effort when you have figured out some quirks of the different tools.\n\nPHPUnit is a pain in the a\\*\\*. But it seems to be the de facto standard so... I'm waiting for a stable version of [Atoum](http://blog.mageekbox.net/?category/Projets/atoum) though.\n\nI got 3 major issues with PHPUnit:\n\n1- On a previous project, I found out the process isolation support is incomplete. To have a real process isolation, you have to put your tests in separate files! And it is really long to run the complete test suite. So you've got 3 options: multiply the file count of your project, curse PHPUnit's author or rewrite your project and stop using constants for everything...\n\n2- Namespace support is weird, especially when using type hinting of classes. My advice: use full-qualified names. Not a big deal, you SHOULD always use full-qualified names anyway. That way, your fellow developer will not have to learn the whole namespace hierarchy to understand your code.\n\n3- Mocks are cool but they're not meant to fix all your problems. You want to test if an object's method is called: mocks are the solution. You want to make sure that during a future rewrite your fellow developer will not forget to update the client class of another? Use a real instance of the object, not a mock of it. Here's a stupid example:\n\n```language-php\nclass Conf\n{\n    public function get_conf($key)\n    {\n        //do something\n    }\n\n    public function set_conf($key,$value)\n    {\n        //do something\n    }\n}\n\nclass Client\n{\n    public function __construct(Conf $conf)\n    {\n        $conf_entry = $conf->get_conf('key');\n        $conf->set_conf('key2','value2');\n        $conf_entry_2 = $conf->get_conf('key2');\n        if($conf_entry_2 === false)\n        {\n             throw new Exception();\n        }\n    }\n}\n```\n\nTo make sure the ``get_conf`` method is called by ``Client``'s constructor, use a mock.\nTo make sure the exception is thrown if ``$conf_entry_2`` is empty, use an instance of ``Conf``. Why?\nBecause someday, ``Conf`` may return ``null`` instead of ``false`` after a rewrite. The ``Conf`` unit tests will be changed and the developer will be happy, he's got 100% passed tests. But the ``Client`` class has not been changed because you've mocked ``Conf`` to return false. The tests are passing but the developer didn't rewrite ``Client`` to test ``$conf_entry_2`` against ``null`` instead of ``false``.\n\nI've also got an issue using autoloading with namespaces. I'm not sure it's related to PHPUnit but anyway... I liked the solution I found because it will prevent some possible code collision which is the main benefit of namespaces in the first place. The solution? Instead of naming your autoload function ``__autoload()``, use a specific and very unique name such as ``myFantasticAutoloadingFunctionThatKicksAss()`` and use the ``spl_autoload_register()`` function to register it as an autoload function. After that PHPUnit was able to find my classes by himself.\n\nNow TDD is starting to be fun.\n\nPS: I will update this page if I find other quirks.\n\n__Update:__\n\nI've got 2 new quick tips:\n\n* I use Netbeans to code and it is really simple to have a split screen in Netbeans. Just drag the file tab you want to split to the right and you'll have a split screen. Really handy for TDD to write your test and your code side by side.\n* I found out that mocking 2 consecutive calls to the same method is not explained in PHPUnit's documentation. But it's simple: instead of using ``once()``, ``any()`` or ``none()`` in ``expects()``, use ``at(0)`` for the first call and ``at(1)`` in the second and so on. You can even make the mock return different values each time. I needed this in my previous example because you usually retrieve configuration more than once.\n"},"3a30":function(e,t){e.exports="If you know me personally or follow me on Twitter, you probably know I just became a father. My daughter is just 3 months old as I wrote those lines. As many parents know already, unless you're exceptionally lucky, you pretty much don't have time for yourself with a child that age. It's either awake and eating or sleeping in your arms most of the time.\n\nAs a geek with many interest centers, that's pretty hard but, at least for me, it's worth it. So I had to find an activity that is geeky but requires only a few minutes at a time and not too much concentration. So I decided to use that idle CPU time on my [Plex](https://plex.tv) server (a 2011 Mac Mini with a 2.3GHz Core i5) and to fill the 9TB on my Synology NAS. I started transcoding my entire collection of DVDs and Blurays. It fits my current schedule perfectly, it only requires a few minutes to set up a transcoding job and let it run for several hours. And the cherry on the cake is that it's much simpler to launch a movie using Plex than using the disk player when you have one arm busy holding your kid.\n\nI didn't calculated but I probably won't be done until this summer. To give you and idea of the task, I have two full Billy bookcases such as [this one](http://www.ikea.com/us/en/catalog/products/40263848/). One of those is almost full of blurays.\n\nAnyway, The topic here is to discuss how I'm transcoding my collection. The idea came when I read [this article](http://sixcolors.com/post/2015/01/how-i-rip-dvds-and-blu-rays/) from Jason Snell at Six Colors. In it, I learned it was now relatively easy to rip and transcode blurays. I used to rip DVDs in the past but I didn't suspect Bluray drives were that cheap now and ripping Blurays so simple. Well, reading Jason Snell, you'd think it simple. But as you'll soon learn, there is no simple \"one size fits all\" setup. That's why I just started using Don Melton's [transcoding scripts](https://github.com/donmelton/video-transcoding-scripts). Thanks to him for his fast answers on Twitter.  \nI've just ripped several blurays and DVDs with them and I have to admit they produce better and smaller files than Handbrake's Apple TV 3 preset.\n\nSo, how do I rip my disks? Well, first, I followed Don's README file instructions to install everything (handbrakecli, mkvtoolnix and mp4v2). Then the procedure is usually the same:\n\n* Scan your media using the `--title 0` option: `./transcode-video.sh --title 0 /Volumes/MY_DISC/ | less`. I pipe the output to `less` because the output is usually pretty long and you need to search in it. I usually search with this pattern `/\\+ duration` then scroll through result with `n` to find the longest title. Here's an example:  \n\n```\n+ title 1:\n  + Main Feature\n  + playlist: 00000.MPLS\n  + angle(s) 2\n  + duration: 01:48:40\n  + size: 1920x1080, pixel aspect: 1/1, display aspect: 1.78, 29.970 fps\n  + autocrop: 0/0/0/0\n  + support opencl: no\n  + support hwd: not built-in\n  + chapters:\n    + 1: cells 0->0, 0 blocks, duration 00:00:43\n    + 2: cells 0->0, 0 blocks, duration 00:04:46\n    + 3: cells 0->0, 0 blocks, duration 00:06:23\n    + 4: cells 0->0, 0 blocks, duration 00:06:14\n    + 5: cells 0->0, 0 blocks, duration 00:06:49\n    + 6: cells 0->0, 0 blocks, duration 00:04:49\n    + 7: cells 0->0, 0 blocks, duration 00:05:48\n    + 8: cells 0->0, 0 blocks, duration 00:04:45\n    + 9: cells 0->0, 0 blocks, duration 00:03:58\n    + 10: cells 0->0, 0 blocks, duration 00:04:39\n    + 11: cells 0->0, 0 blocks, duration 00:06:13\n    + 12: cells 0->0, 0 blocks, duration 00:04:34\n    + 13: cells 0->0, 0 blocks, duration 00:05:08\n    + 14: cells 0->0, 0 blocks, duration 00:04:30\n    + 15: cells 0->0, 0 blocks, duration 00:06:29\n    + 16: cells 0->0, 0 blocks, duration 00:06:03\n    + 17: cells 0->0, 0 blocks, duration 00:05:19\n    + 18: cells 0->0, 0 blocks, duration 00:06:43\n    + 19: cells 0->0, 0 blocks, duration 00:06:31\n    + 20: cells 0->0, 0 blocks, duration 00:04:37\n    + 21: cells 0->0, 0 blocks, duration 00:03:32\n    + 22: cells 0->0, 0 blocks, duration 00:00:06\n    + 23: cells 0->0, 0 blocks, duration 00:00:01\n  + audio tracks:\n    + 1, English (AC3) (5.1 ch) (iso639-2: eng), 48000Hz, 640000bps\n    + 2, English (TrueHD) (5.1 ch) (iso639-2: eng)\n    + 3, English (AC3) (2.0 ch) (iso639-2: eng), 48000Hz, 640000bps\n    + 4, English (TrueHD) (2.0 ch) (iso639-2: eng)\n  + subtitle tracks:\n  + combing detected, may be interlaced or telecined\n```\n\n* From that information, I built this command: `./transcode-video.sh --title 1 --big --audio 1 --allow-dts --filter decomb /Volumes/MY_DISC/`\n\n  * I chose the title with `--title 1`. It's the longest title. If you're not sure, use the Handbrake GUI and its preview feature to find the correct title.\n  * I use the `--big` option because I prefer quality over final size\n  * The ` --audio 1 --allow-dts` options tell Handbrake to select the first track, downmix it to 2.0 AAC and also pass it through as a second audio track (`--allow-dts`). I chose the first audio track because Handbrake can't passthrough LPCM, TrueHD or FLAC. So, if the audio is gonna be downmixed to AC3 5.1 anyway, I prefer to passthrough the original AC3 track instead of loosing CPU time.\n  * The `--filter decomb` option is important here. The last line of the scan says *combing detected, may be interlaced or telecined*. This means you'll probably have combing as shown in the picture below. As Don told me on Twitter, using this option is impacting performance and quality, so don't use it if you don't need it.\n<img src=\"/images/2015/02/combing-300x188.jpg\" alt=\"combing\" width=\"300\" height=\"188\" class=\"aligncenter size-medium wp-image-76\" />\n\nAlso, I strongly recommend you use `./transcode-video.sh --fullhelp` in addition to the README file, you'll get more information an the available options.\n\nFinally, one note about subtitles. From what I gathered, converting Bluray subtitles (PGS) to .srt files is pretty complicated on Mac. I decided to don't bother with that and try to find them online instead. You can even add them to the mp4 file later with `ffmpeg`. Also, putting the raw PGS subtitle is not compatible with mp4 format and could have weird effects on your player. For DVDs, I usually put the vobsub track directly in the mp4 file. I don't burn them in though.\n"},"45df":function(e,t,o){var n={"./2011-02-22-mixing-up-tdd-phpunit-namespaces-and-jenkins.markdown":"0253","./2011-06-18-filtering-a-phar-content.markdown":"99ee","./2011-08-25-recent-php-discoveries.markdown":"b648","./2011-10-06-rip-steve-jobs.markdown":"7b18","./2011-12-10-my-journey-with-ruby.markdown":"6d34","./2011-12-18-a-quick-ruby-port.markdown":"edf6","./2012-01-01-vim.markdown":"77e1","./2012-04-10-good-and-bad-languages.markdown":"f163","./2012-06-07-anonymous-classes-in-php.markdown":"7466","./2012-07-13-should-i-test-accessors.markdown":"5131","./2012-10-11-tdd-bdd-potato-potatoe.markdown":"accd","./2012-11-11-how-i-set-up-my-development-environment-on-mac.markdown":"cf4c","./2013-01-05-its-more-scallable.markdown":"8943","./2013-01-14-partial-mocks-with-mockery.markdown":"f88c","./2013-02-10-development-environments-with-vagrant.markdown":"ec07","./2013-11-01-how-to-dynamically-localize-angularjs.markdown":"7330","./2014-12-22-about-the-star-wars-episode-vii-teaser-trailer.markdown":"e12b","./2014-12-22-joe-cocker.markdown":"8eb1","./2014-12-24-my-quest-to-the-perfect-headphones.markdown":"4778","./2015-01-19-transcoding.markdown":"3a30","./2015-05-04-gibson-sg-customization.markdown":"a43d","./2016-12-02-macbook-pro-2016-issues.markdown":"ace9"};function a(e){var t=s(e);return o(t)}function s(e){var t=n[e];if(!(t+1)){var o=new Error("Cannot find module '"+e+"'");throw o.code="MODULE_NOT_FOUND",o}return t}a.keys=function(){return Object.keys(n)},a.resolve=s,e.exports=a,a.id="45df"},4678:function(e,t,o){var n={"./af":"2bfb","./af.js":"2bfb","./ar":"8e73","./ar-dz":"a356","./ar-dz.js":"a356","./ar-kw":"423e","./ar-kw.js":"423e","./ar-ly":"1cfd","./ar-ly.js":"1cfd","./ar-ma":"0a84","./ar-ma.js":"0a84","./ar-sa":"8230","./ar-sa.js":"8230","./ar-tn":"6d83","./ar-tn.js":"6d83","./ar.js":"8e73","./az":"485c","./az.js":"485c","./be":"1fc1","./be.js":"1fc1","./bg":"84aa","./bg.js":"84aa","./bm":"a7fa","./bm.js":"a7fa","./bn":"9043","./bn.js":"9043","./bo":"d26a","./bo.js":"d26a","./br":"6887","./br.js":"6887","./bs":"2554","./bs.js":"2554","./ca":"d716","./ca.js":"d716","./cs":"3c0d","./cs.js":"3c0d","./cv":"03ec","./cv.js":"03ec","./cy":"9797","./cy.js":"9797","./da":"0f14","./da.js":"0f14","./de":"b469","./de-at":"b3eb","./de-at.js":"b3eb","./de-ch":"bb718","./de-ch.js":"bb718","./de.js":"b469","./dv":"598a","./dv.js":"598a","./el":"8d47","./el.js":"8d47","./en-SG":"cdab","./en-SG.js":"cdab","./en-au":"0e6b","./en-au.js":"0e6b","./en-ca":"3886","./en-ca.js":"3886","./en-gb":"39a6","./en-gb.js":"39a6","./en-ie":"e1d3","./en-ie.js":"e1d3","./en-il":"7333","./en-il.js":"7333","./en-nz":"6f50","./en-nz.js":"6f50","./eo":"65db","./eo.js":"65db","./es":"898b","./es-do":"0a3c","./es-do.js":"0a3c","./es-us":"55c9","./es-us.js":"55c9","./es.js":"898b","./et":"ec18","./et.js":"ec18","./eu":"0ff2","./eu.js":"0ff2","./fa":"8df4","./fa.js":"8df4","./fi":"81e9","./fi.js":"81e9","./fo":"0721","./fo.js":"0721","./fr":"9f26","./fr-ca":"d9f8","./fr-ca.js":"d9f8","./fr-ch":"0e49","./fr-ch.js":"0e49","./fr.js":"9f26","./fy":"7118","./fy.js":"7118","./ga":"5120","./ga.js":"5120","./gd":"f6b4","./gd.js":"f6b4","./gl":"8840","./gl.js":"8840","./gom-latn":"0caa","./gom-latn.js":"0caa","./gu":"e0c5","./gu.js":"e0c5","./he":"c7aa","./he.js":"c7aa","./hi":"dc4d","./hi.js":"dc4d","./hr":"4ba9","./hr.js":"4ba9","./hu":"5b14","./hu.js":"5b14","./hy-am":"d6b6","./hy-am.js":"d6b6","./id":"5038","./id.js":"5038","./is":"0558","./is.js":"0558","./it":"6e98","./it-ch":"6f12","./it-ch.js":"6f12","./it.js":"6e98","./ja":"079e","./ja.js":"079e","./jv":"b540","./jv.js":"b540","./ka":"201b","./ka.js":"201b","./kk":"6d79","./kk.js":"6d79","./km":"e81d","./km.js":"e81d","./kn":"3e92","./kn.js":"3e92","./ko":"22f8","./ko.js":"22f8","./ku":"2421","./ku.js":"2421","./ky":"9609","./ky.js":"9609","./lb":"440c","./lb.js":"440c","./lo":"b29d","./lo.js":"b29d","./lt":"26f9","./lt.js":"26f9","./lv":"b97c","./lv.js":"b97c","./me":"293c","./me.js":"293c","./mi":"688b","./mi.js":"688b","./mk":"6909","./mk.js":"6909","./ml":"02fb","./ml.js":"02fb","./mn":"958b","./mn.js":"958b","./mr":"39bd","./mr.js":"39bd","./ms":"ebe4","./ms-my":"6403","./ms-my.js":"6403","./ms.js":"ebe4","./mt":"1b45","./mt.js":"1b45","./my":"8689","./my.js":"8689","./nb":"6ce3","./nb.js":"6ce3","./ne":"3a39","./ne.js":"3a39","./nl":"facd","./nl-be":"db29","./nl-be.js":"db29","./nl.js":"facd","./nn":"b84c","./nn.js":"b84c","./pa-in":"f3ff","./pa-in.js":"f3ff","./pl":"8d57","./pl.js":"8d57","./pt":"f260","./pt-br":"d2d4","./pt-br.js":"d2d4","./pt.js":"f260","./ro":"972c","./ro.js":"972c","./ru":"957c","./ru.js":"957c","./sd":"6784","./sd.js":"6784","./se":"ffff","./se.js":"ffff","./si":"eda5","./si.js":"eda5","./sk":"7be6","./sk.js":"7be6","./sl":"8155","./sl.js":"8155","./sq":"c8f3","./sq.js":"c8f3","./sr":"cf1e","./sr-cyrl":"13e9","./sr-cyrl.js":"13e9","./sr.js":"cf1e","./ss":"52bd","./ss.js":"52bd","./sv":"5fbd","./sv.js":"5fbd","./sw":"74dc","./sw.js":"74dc","./ta":"3de5","./ta.js":"3de5","./te":"5cbb","./te.js":"5cbb","./tet":"576c","./tet.js":"576c","./tg":"3b1b","./tg.js":"3b1b","./th":"10e8","./th.js":"10e8","./tl-ph":"0f38","./tl-ph.js":"0f38","./tlh":"cf75","./tlh.js":"cf75","./tr":"0e81","./tr.js":"0e81","./tzl":"cf51","./tzl.js":"cf51","./tzm":"c109","./tzm-latn":"b53d","./tzm-latn.js":"b53d","./tzm.js":"c109","./ug-cn":"6117","./ug-cn.js":"6117","./uk":"ada2","./uk.js":"ada2","./ur":"5294","./ur.js":"5294","./uz":"2e8c","./uz-latn":"010e","./uz-latn.js":"010e","./uz.js":"2e8c","./vi":"2921","./vi.js":"2921","./x-pseudo":"fd7e","./x-pseudo.js":"fd7e","./yo":"7f33","./yo.js":"7f33","./zh-cn":"5c3a","./zh-cn.js":"5c3a","./zh-hk":"49ab","./zh-hk.js":"49ab","./zh-tw":"90ea","./zh-tw.js":"90ea"};function a(e){var t=s(e);return o(t)}function s(e){var t=n[e];if(!(t+1)){var o=new Error("Cannot find module '"+e+"'");throw o.code="MODULE_NOT_FOUND",o}return t}a.keys=function(){return Object.keys(n)},a.resolve=s,e.exports=a,a.id="4678"},4778:function(e,t){e.exports='I\'m a fan of music, I like a lot a different genres. Nowadays, to listen to music, you need some mp3 player (usually your smartphone, PC or tablet) and headphones.  \nYeah I know, you can use speakers too but I almost find it rude to impose the music you listen at to others. And since I have a baby at home, if I want to listen to music at reasonable volume, speakers of out of question.  \nI use speakers occasionally, either to start my baby\'s musical education or to watch videos (TV shows, movies, Youtube). For that, I chose [monitors](http://www.m-audio.com/products/view/studiophile-av-30) because most PC speakers have too much bass. Since I don\'t like impose my music and bass tend to leak from a room more than other frequencies, I recommend monitors. You can always use an EQ to push bass if you want.\n\nAnd, both at work and at home, I use a dedicated DAC to listen to music. You don\'t think you need a dedicated DAC until you\'ve used one for 5 minutes. Once you go DAC, you never go back.  \nI don\'t even use a fancy DAC, I use the [FiiO E10](http://www.amazon.fr/gp/product/B005VO7LG6). It has very good value, the only downside is that it\'s very sensible to radio waves such as GSM or strong Wifi hotspots (not your PC\'s wifi).\n\nSo, on the my quest to find the perfect headphones. For a long time, I\'ve used Apple\'s earbuds then earpods. As you know, they have poor sound but their the only headphones I could use a full day.\n\nSo I had a checklist of requirements:\n\n<ol>\n\t<li>Can be used a full day of work</li>\n\t<li>Can be used in an open space</li>\n\t<li>Best sound possible</li>\n</ol>\n\nThe first requirement is tricky for me because I have sensible and large ears than don\'t like in-hear or on-ear headphones. So I need *large* over-ear headphones (earbuds don\'t fit the third requirement).\nOn top of that, I need a closed model (going against the third requirement, open models have a better sound) because I don\'t want to be beaten alive by my coworkers and because I listen to music to isolate myself from the ambiant noise in the first place.\n\nSo, here\'s the list I\'ve gone through:\n\n<ul>\n\t<li><img src="/images/2015/02/AKG_K619-150x150.jpg" style="float:right;max-width:150px;max-height:150px"> First, I bought an AKG K619. It took me an hour to figure out I would <em>never</em> bear to use on-ear headphones for a whole day. My ears become red, very hot and they hurt a lot. The AKG K619 have a good sound, they\'re just not for me.</li>\n\t<li style="clear:both;"><img src="/images/2015/02/Sennheiser_HD_558.jpg" style="float:right;max-width:150px;max-height:150px"> Then I bought a Sennheiser HD 558. They\'re perfect. The sound is incredible, they\'re so comfortable I can wear them several hours without any fatigue or pain, they\'re great headphones. <em><strong>But</strong></em> it\'s an open model. I can\'t use them at work. But I use them a lot at home when I\'m alone in the room.</li>\n\t<li style="clear:both;"><img src="/images/2015/02/Sennheiser_HD201.jpg" style="float:right;max-width:150px;max-height:150px"> Then I went cheap with the Sennheiser HD201. Very good value, just not good enough. The cable is pretty bad by the way but you can\'t expect much at this price.</li>\n\t<li style="clear:both;"><img src="/images/2015/02/Sennheiser_HD_449.jpg" style="float:right;max-width:150px;max-height:150px"> I tried a last Sennheiser, the Sennheiser HD 449. They were too small, they were like on-hear headphones for me. I sent them back.</li>\n\t<li style="clear:both;"><img src="/images/2015/02/Audio-Technica_ATH-M50X.jpg" style="float:right;max-width:150px;max-height:150px"> Then I heard about the Audio-Technica ATH-M50X. A lot of people say it\'s the best headphones in their price range with a great margin. Guess what? They are but they\'re also too small. Sent them back too.</li>\n</ul>\n\n<p style="clear:both;">At that point, I swore I wouldn\'t buy headphones online before trying them on first. I went to a big store and looked around. I didn\'t want some Beats because, well, they suck. They\'re not worth half their price. I had a poor opinion of Bose too. But the more I looked around, the less I found suitable headphones for me. Out of curiosity, I tried a Bose sound-canceling pair, the <a href="http://www.bose.com/controller?url=/shop_online/headphones/noise_cancelling_headphones/quietcomfort_25/index.jsp">QC 25</a> and I was blown away. The noisy, full-of-Christmas-shoppers store went almost completely silent. And even more surprising to me, the headphones weigh almost nothing!\nBut the price made me hesitate. Next to them were the <a href="http://www.bose.com/controller?url=/shop_online/headphones/ae_and_oe_headphones/soundtrue_headphones/index.jsp&Variant=soundtrue_ae_headphones">SoundTrue</a>. The sound was even better than the QC 25. The isolation was very good even without the noise-cancellation system. And they are much cheaper. The sound is pretty good, not HD 558 good but pretty good, especially if you don\'t push the bass too much.\n<img src="/images/2015/02/SoundTrue.jpg" style="float:left;max-width:150px;max-height:150px">After some hesitation, I chose the SoundTrue over the QC 25 for another reason. The noise-cancellation requires a battery that\'ll last from 20 to 30 hours. That\'s not even a work week. And I read the sound is crap when you turn the active circuit off because there is an EQ in it. So, for using in a plane, I would buy a QC 25 without hesitation. But for use at the office, I chose the SoundTrue. They\'re so light, it\'s incredible. Ok, at the 3-hour mark, you can feel a bit hot but a few minutes break and it goes away.</p>\n\nSo, the bottom line is, for some stuff you can\'t shop online or gift them. That\'s the case for headphones, at least for me. \n'},5131:function(e,t){e.exports='**ARCHIVE**\n\nShould one test getters and setters? I mean default accessors like these ones:\n\n```language-php\nclass MyClass\n{\n    private $MyProperty;\n\n    public function setMyProperty($MyProperty)\n    {\n        $this->MyProperty = $MyProperty;\n    }\n\n    public function getMyProperty()\n    {\n        return $this->MyProperty;\n    }\n}\n```\n\nA quick Google search on the topic shows there is no clear agreement on the topic. I would tend to say I should not unit test them if I don\'t see a point in testing them. Unecessary tests are waste.\n\nAnd I don\'t see a point in testing accessors. Why?\n\nFirst, because the setters don\'t return anything. So I can\'t **directly** test what they return. I mean, if the property it sets is private, you can\'t read it to see if the setter correctly did is job right? Except by using the property\'s getter. But now you\'re not writing a unit test anymore because you assume the getter works fine. If the getter changes the property in any way, your test is going to fail but not because of the setter but because of the getter.\n\nFor the same reason, testing a basic getter doesn\'t make more sense to me.\n\nYou disagree? Please leave a *civilized and argumented* comment :)\n\nPS: Thanks to [@mageekguy](https://twitter.com/mageekguy) for giving me a topic for a new post ^^\n\n**EDIT:** I asked this question to [J.B. Rainsberger](http://www.jbrains.ca/ "jbrains")  on Twitter. His answer is pretty clear. If you\'re new to TDD, test everything. But after a while you should consider if accessors are too simple to break.\n\n<blockquote class="twitter-tweet tw-align-center" data-in-reply-to="224756188980584448"><p>@<a href="https://twitter.com/sjodet">sjodet</a> Novices <a href="http://t.co/yVDnqeVg" title="http://link.jbrains.ca/sYj5Y">link.jbrains.ca/sYj5Y</a> should test everything; Advanced Beginners explore Too Simple to Break <a href="http://t.co/cd8JSvlA" title="http://link.jbrains.ca/mZwHzi">link.jbrains.ca/mZwHzi</a></p>&mdash; ☕ J. B. Rainsberger (@jbrains) <a href="https://twitter.com/jbrains/status/224861598739730432" data-datetime="2012-07-16T13:42:37+00:00">July 16, 2012</a></blockquote>\n<script src="//platform.twitter.com/widgets.js" charset="utf-8"><\/script>\n'},"56d7":function(e,t,o){"use strict";o.r(t);o("cadf"),o("551c"),o("f751"),o("097d");var n=o("2b0e"),a=o("bb71");o("da64");n["a"].use(a["a"],{iconfont:"md"});var s=function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("v-app",[o("v-toolbar",{attrs:{app:""}},[e.isBackButtonDisplayed?o("v-btn",{attrs:{dark:"",fab:"",exact:"",color:"primary",to:"/"}},[o("v-icon",[e._v("arrow_back")])],1):e._e(),o("v-toolbar-title",{staticClass:"headline text-uppercase"},[o("span",[e._v("Simon Jodet")])]),o("v-spacer"),o("v-spacer"),o("v-spacer"),o("v-spacer"),o("v-text-field",{attrs:{"hide-details":"","prepend-icon":"search","single-line":"",clearable:""},on:{change:e.onSearch,"click:clear":e.onClearSearch}})],1),o("v-content",[o("router-view",{attrs:{search:e.search}})],1),o("v-footer",{attrs:{height:"auto",color:"primary lighten-1"}},[o("v-layout",{attrs:{"justify-center":"",row:"",wrap:""}},[o("v-flex",{attrs:{primary:"","lighten-2":"","py-3":"","text-xs-center":"","white--text":"",xs12:""}},[e._v("\n        ©2019 —\n        "),o("strong",[e._v("Simon Jodet")])])],1)],1)],1)},i=[],r=(o("7f7f"),{name:"App",data:function(){return{search:""}},computed:{isBackButtonDisplayed:function(){return"home"!==this.$route.name}},methods:{onSearch:function(e){this.search=e},onClearSearch:function(){this.search=""}}}),l=r,h=o("2877"),u=o("6544"),c=o.n(u),d=o("7496"),p=o("8336"),m=o("549c"),g=o("0e8f"),b=o("553a"),y=o("132d"),f=o("a722"),w=o("9910"),v=o("2677"),k=o("71d9"),I=o("2a7f"),j=Object(h["a"])(l,s,i,!1,null,null,null),S=j.exports;c()(j,{VApp:d["a"],VBtn:p["a"],VContent:m["a"],VFlex:g["a"],VFooter:b["a"],VIcon:y["a"],VLayout:f["a"],VSpacer:w["a"],VTextField:v["a"],VToolbar:k["a"],VToolbarTitle:I["a"]});o("ac6a");var P=o("5d73"),T=o.n(P),A=o("2d7d"),x=o.n(A),D=o("8c4f"),_=function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("posts",{attrs:{posts:e.postList}})},H=[],M=(o("6762"),o("2fdb"),o("386d"),o("75fc")),C=function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("v-container",{attrs:{"grid-list-xl":""}},[o("v-layout",{attrs:{row:"",wrap:""}},e._l(e.posts,function(t){return o("v-flex",{key:t.id,attrs:{xl12:""}},[o("v-card",[o("v-card-title",[o("div",[o("div",{staticClass:"title"},[o("router-link",{attrs:{to:"/"+t.id}},[e._v(e._s(t.title))])],1),o("div",{staticClass:"caption font-weight-light"},[e._v(e._s(t.date))])])]),o("v-card-text",{domProps:{innerHTML:e._s(t.html)}}),o("v-card-actions",[t.tags?o("div",{staticClass:"caption font-weight-light"},[e._v("\n            Tags:\n            "),o("span",{staticClass:"font-weight-thin"},[e._v(e._s(t.tags))])]):e._e()])],1)],1)}),1)],1)},B=[],J=o("1487"),L=o.n(J),O={name:"posts",props:{posts:{type:Array,required:!0}},mounted:function(){document.querySelectorAll("pre").forEach(function(e){L.a.highlightBlock(e)})}},R=O,V=(o("5b6a"),o("b0af")),q=o("99d9"),E=o("12b2"),z=o("a523"),U=Object(h["a"])(R,C,B,!1,null,null,null),F=U.exports;c()(U,{VCard:V["a"],VCardActions:q["a"],VCardText:q["b"],VCardTitle:E["a"],VContainer:z["a"],VFlex:g["a"],VLayout:f["a"]});var $={components:{posts:F},props:{posts:{type:x.a,required:!0},search:{type:String}},computed:{postList:function(){var e=this,t=Object(M["a"])(this.posts.values());return this.search&&(t=t.filter(function(t){return t.markdown.includes(e.search)||t.tags.includes(e.search)})),t.reverse()}}},G=$,Y=Object(h["a"])(G,_,H,!1,null,null,null),N=Y.exports,W=function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("div",[o("posts",{attrs:{posts:e.postList}})],1)},Q=[],K={components:{posts:F},props:{posts:{type:x.a,required:!0}},computed:{postList:function(){return[this.posts.get(this.$route.params.id)]}}},Z=K,X=Object(h["a"])(Z,W,Q,!1,null,null,null),ee=X.exports,te=o("0e54"),oe=o.n(te),ne=o("c1df"),ae=o("8e92");n["a"].use(D["a"]);var se=new x.a(ae),ie=o("45df"),re=".markdown".length,le=!0,he=!1,ue=void 0;try{for(var ce,de=T()(ie.keys());!(le=(ce=de.next()).done);le=!0){var pe=ce.value,me=ie(pe),ge=pe.substring(2,pe.length-re);if(se.has(ge)){var be=se.get(ge);be.markdown=me,be.html=oe()(me),be.date=ne(be.date).format("LL"),be.tags=be.tags?be.tags.join(", "):""}}}catch(fe){he=!0,ue=fe}finally{try{le||null==de.return||de.return()}finally{if(he)throw ue}}var ye=new D["a"]({mode:"history",base:"/",routes:[{path:"/",name:"home",component:N,props:{posts:se}},{path:"/:id",name:"post",component:ee,props:{posts:se}},{path:"/:year/:month/:day/:id",redirect:function(e){return"".concat(e.params.year,"-").concat(e.params.month,"-").concat(e.params.day,"-").concat(e.params.id.substring(0,e.params.id.length-5))}}],scrollBehavior:function(e,t,o){return o||{x:0,y:0}}});n["a"].config.productionTip=!1,new n["a"]({router:ye,render:function(e){return e(S)}}).$mount("#app")},"5b6a":function(e,t,o){"use strict";var n=o("d99c"),a=o.n(n);a.a},"6d34":function(e,t){e.exports="**ARCHIVE**\n\nI'm a developer. But as a developer, I'm fairly faithful. I really seriously started programming with PHP. I learned and used this language thouroughly. I consider myself an expert programmer in this language.\n\nIt's more or less my native language. My second language is JavaScript. I started playing with it a long time ago but really discovered its power in 2007 with Mootools.\nYes Mootools! jQuery is for sissies! Just kidding, jQuery is fine but if you want to really learn JavaScript, try Mootools or ExtJS, read [this](http://shop.oreilly.com/product/9780596101992.do), Crockford's [book](http://shop.oreilly.com/product/9780596517748.do) and watch [his lectures](http://yuiblog.com/crockford/).\n\nI've played with other languages, some really close to what I know - ActionScript is just JavaScript- others a little more different like Python. Python is nice but we have our fair share of Python developers at the office. What's the fun of learning a new language if you have the security of being able to ask the guy next door?\n\nSo as you probably guessed with this article's title, I've decided to learn Ruby. And I just figured out that I should document this journey. I don't know if it'll help anybody but, heh, why not?\nSo to be fair, I've tried Ruby before. Not very seriously. And because of this blog actually. It's built on [Jekyll](http://jekyllrb.com/) which is written in Ruby. When I wanted to change some stuff I realized I should probably learn Ruby first.\n\nThis introduction is already way too long so let's get to the point.\n\n* Ruby is a pretty cool language, clearly designed for the convenience of the developer, with a lot of alternative syntaxes and shortcuts.\n  The language is, I feel, sometimes a bit too forgiving, leaving the developer free to write bad code without realizing it.\n* I just love the fact that Ruby has closures. It's like a mix between PHP and JavaScript.\n* Gems seem to be a lot better than PHP's PEAR.\n* The documentation is huge, a bit too much actually. My first tries at Ruby were a bit rushed. I've been hearing praises for Ruby On Rails for so long, I tried to learn the language through RoR.\n  Even though there is a lot of [good tutorials](http://railsforzombies.org/), you should start by learning Ruby first, RoR second. So, I got the [Learning Ruby](http://shop.oreilly.com/product/9780596529864.do) book and just read it. It's not a perfect book, I feel it sometimes even expressed dangerous opinions for junior developers. But if you want to learn the basics of the language, it does the trick.\n* Still regarding the documentation, for whatever reason, it's hard for me to understand the reference documentation. It's just a mess for me. I tried to learn the language with a small program that manipulate file paths. In other words, strings. When I started looking for a way to use Regexp, I hit [a wall](http://www.ruby-doc.org/core-1.8.7/Regexp.html). Where is the legend? Where is the real life example? Oh I see, I have to use the ``new`` method to transform a string in a pattern. I mean, the php.net documentation is not that good but a least you get examples in their context...\n* I took me 2 hours and a lot of digging to understand why my ``require 'json'`` directive didn't work even though I had installed the gem. Actually, I still don't understand why, I just found that with ``require 'rubygems'`` before, it was working.\n* Even though Ruby is installed by default on Mac OS X, some struff doesn't really work well. Or I just broke it earlier digging in my system. I'm currently using the macports version of Ruby (1.8.7). I may eventually decide to compile it myself or use rvm.\n\nSo, for the couple of geeks that'll read this, if you know soemthing about Ruby, have advices, books I should read, please let me know in the comments :)\n"},7330:function(e,t){e.exports='**ARCHIVE**\n\nThe other day, I found out some things in [AngularJS](http://angularjs.org/) are still not really well polished. One of those things in internationalization.\n\nI18n and l10n in AngularJS are ["natively"](http://docs.angularjs.org/guide/i18n) supported. First of all, that\'s not completely true. Components of AngularJS can be easily localized (and yet not really, we\'ll talk about that). For your code and your texts, you\'re on your own.\nI chose to write my own directive and filter because that\'s actually really easy with AngularJS. You can also look around, I found several libraries for that purpose and more. Whatever solution you choose, you\'ll have a dynamically localizable app. Except for that part that AngularJS localize himself.\n\nThere is no official way to change the locale of the AngularJS components without reloading the page. And if like me the other day, you\'re working on an app that is completely client-side (no server-side code to load the correct locale file), you\'re screwed.\nI found a couple of libs but they were either deprecated already or such a nasty hack that they were sure to be incompatible with the next AngularJS version.\n\nSo the goal was to be able to load the correct locale file from the [official bower package](https://github.com/angular/bower-angular-i18n) dynamically after figuring out with some JS code what locale the user should see.\n\nThe trick is with AngularJS that you **must** do it **before** your app is started but **after** AngularJS is loaded.\n\nMy first idea was to:\n\n1. include AngularJS,\n2. include jQuery,\n3. load the locale file dynamically with [`$.getScript()`](http://api.jquery.com/jQuery.getScript/)\n4. include my app\'s files\n\nSomething like this:\n```language-markup\n\t<!DOCTYPE html>\n\t<html ng-app="myApp">\n\t<head>\n\t    <script src="lib/angular/angular.js"><\/script>\n\t    <script src="lib/jquery/jquery.js"><\/script>\n\t    <script>\n\t    //Some code to find out the locale\n\t    var locale = "fr";\n\t    $.getScript("lib/angular-i18n/angular-locale_" + locale + ".js");\n\t    <\/script>\n\t    <script src="js/myApp.js"><\/script>\n\t    <script src="js/controllers/myController.js"><\/script>\n\t    <script src="js/factories/myFactory.js"><\/script>\n\t    \x3c!--etc.--\x3e\n\t</head>\n\t<body ng-controller="myController">\n```\n\nThat will probably work if you have enough files in your app that AngularJS, jQuery and your locale file are downloaded before your app starts. But that\'s not certain and that\'s a dirty trick anyway - inline code = not good.\n\nAnother issue is that it makes things significantly more difficult when you want to concatenate and minify your JS code. At that point, the hack doesn\'t work anymore because there is a good chance that `AngularJS + jQuery > your code`.\n\nSo how did I fixed this?\n\nFirst the inline code went in its own file and function so it can be concatenated and localized like the rest of my code:\n```language-javascript\n\tvar myAppUtils = myAppUtils || {};\n\tmyAppUtils.i18nUtils = {\n\t    "loadAngularLocaleFile": function(callback) {\n\t        //Some code to find out the locale\n\t\t    var locale = "fr";\n\t\t    $.getScript("lib/angular-i18n/angular-locale_" + locale + ".js");\n\t    }\n\t};\n```\nThen I removed the `ng-app="myApp"` directive from the `html` tag. It is necessary because this directive [automatically bootstraps](http://docs.angularjs.org/guide/bootstrap) AngularJS, starting your app as soon as possible.\n\nFinally, I added this code at the bottom of `js/myApp.js`:\n```language-javascript\n\tmyAppUtils.i18nUtils.loadAngularLocaleFile(function() {\n\t    angular.bootstrap(document, ["myApp"]);\n\t});\n```\nIt bootstraps my app in the callback of the locale loading, that way I\'m sure the locale file and the libs are loaded before the app starts.\n'},7466:function(e,t){e.exports='**ARCHIVE**\n\nAnonymous classes are already there in PHP with the StdClass but it was not designed to be used with method but just properties.\n\nSo I wrote a small class to create Anonymous classes that accept closure members and consider them methods.\n\nI especially like to use it with [Pimple](https://github.com/fabpot/Pimple). Now when I need to inject some dependency, I can quickly do it without having to create a class.\nThe example below shows how I can wrap the PHP `exec` method, inject it as a dependency and mock it in my unit tests.\n\n<script src="https://gist.github.com/2867181.js"> <\/script>\n'},"77e1":function(e,t){e.exports="**ARCHIVE**\n\nWhile I'm learning Ruby (and a bit of Python) I decided to make things a bit more difficult and I started to learn [Vim](http://www.vim.org/).\n\nFor a while, I thought Vim was just a way for some developers to show off and snob us, the stupid people using \"notepad-like\" editors.\nWhile I still think that really smart \"notepad-like\" editors like Eclipse, Netbeans and Intellij Idea can be really useful and let developers code and read code faster, I can now understand why Vim is a very valid contender in the race to the best text editor. But damn! The learning curve is steap!\n\nTo help me, I found this blog from this canadian dude, Derek Wyatt, and his screencasts teaching how to use Vim. He's a bit crazy (especially in the first video) but his style and passion actually helps a lot.\n\nSo if you ever consider learning how to use Vim or get better at using it, take the time to watch [Derek Wyatt's screencasts](http://derekwyatt.org/vim/tutorials/).\n\nBy the way, this is my first post written using Vim and I swear I didn't used the arrow keys (almost).\n"},"7b18":function(e,t){e.exports='**ARCHIVE**\n\n<div style="text-align:center;"><a href="http://www.apple.com/stevejobs/"><img src="/images/2015/02/rip_steve.png" style="max-width:600px;"/></a></div>\n'},8943:function(e,t){e.exports='**ARCHIVE**\n\nIn a matter of a week, I\'ve been "trolled" twice - I may be exaggerating a bit here - on Twitter by two very serious and talented developers: [@dhh](https://twitter.com/intent/user?screen_name=dhh) (creator of Ruby on Rails) and [@JBossMike](https://twitter.com/intent/user?screen_name=JBossMike) (a core engineer at JBoss).\n\n#### The DHH incident\nFirst, I got a bit pissed at @dhh for this tweet:\n<blockquote class="twitter-tweet tw-align-center"><p>It\'s the same thing about PHP. Its simplicity and niche was and is amazing. Trying to grow it into a full OO env is folly.</p>&mdash; DHH (@dhh) <a href="https://twitter.com/dhh/status/284942147428438016" data-datetime="2012-12-29T08:41:16+00:00">December 29, 2012</a></blockquote>\n<script async src="//platform.twitter.com/widgets.js" charset="utf-8"><\/script>\n\nI could have let it go but it was not the first time I saw a Ruby developer bashing PHP about it being simple or messy or not professional.\n\nSo I answered with:\n<blockquote class="twitter-tweet tw-align-center"><p>And now @<a href="https://twitter.com/dhh">dhh</a> is trolling about PHP… You should look at Symfony 2 or Zend Framework, you\'ll learn a couple of things about true OOP...</p>&mdash; Simon Jodet (@sjodet) <a href="https://twitter.com/sjodet/status/284946401127985152" data-datetime="2012-12-29T08:58:10+00:00">December 29, 2012</a></blockquote>\n<script async src="//platform.twitter.com/widgets.js" charset="utf-8"><\/script>\nand got his attention with:\n<blockquote class="twitter-tweet tw-align-center"><p>.@<a href="https://twitter.com/dhh">dhh</a> tweets PHP is not a full OO env just weeks after @<a href="https://twitter.com/gilesgoatboy">gilesgoatboy</a> publishes a book about how Rails gets OOP wrong: <a href="http://t.co/op0uF4LX" title="http://railsoopbook.com/">railsoopbook.com</a></p>&mdash; Simon Jodet (@sjodet) <a href="https://twitter.com/sjodet/status/284948263029846016" data-datetime="2012-12-29T09:05:34+00:00">December 29, 2012</a></blockquote>\n<script async src="//platform.twitter.com/widgets.js" charset="utf-8"><\/script>\n\nThe discussion went on for a while but basically, @dhh said he admired PHP for its original simplicity but it shouldn\'t have evolved toward OOP.\n\n#### Discussing with Mike Brock\nThen today I had a Twitter conversation with @JBossMike who reacted to this tweet of mine:\n<blockquote class="twitter-tweet tw-align-center"><p>ROFL "Java has eclipsed most dynamic languages" <a href="http://t.co/Dnd2c0Am" title="http://ocpsoft.org/opensource/javascript-is-the-new-perl/">ocpsoft.org/opensource/jav…</a> Except at Facebook, Twitter, Google, Dropbox and the list is long...</p>&mdash; Simon Jodet (@sjodet) <a href="https://twitter.com/sjodet/status/287587204702822402" data-datetime="2013-01-05T15:51:47+00:00">January 5, 2013</a></blockquote>\n<script async src="//platform.twitter.com/widgets.js" charset="utf-8"><\/script>\nBasically, he took offence of *"ROFL"* associated with Java - or maybe because I made fun of his colleague\'s article - and spent a surprising amount of time listing how much Facebook, Twitter and especially Google were using Java and how much Java is scalable.\nI can\'t argue with that, he probably knows better than I do what language is used at Google and it\'s absolutely true some very scalable tools like Cassandra or Hadoop are coded with Java.\n\n#### Scalability is not the only criterium\nBut, like @dhh, @JBossMike missed my point or ignored it. There is a good reason Google was initially using Python. Facebook still uses PHP heavily and Twitter was created with Rails.\n\nThe reason is those languages and their ecosystem allow for a quick development and are easily deployable. I\'m no Java expert but I\'d suspect Java doesn\'t perform as well on small architectures as those 3 languages.\nI\'d also suspect that in order to deliver a working prototype of Facebook, Google or Twitter, the amount of code/work necessary in Java is higher.\nAnd finally, I think Java developers are more expensive than their fellow developers specialised in PHP, Python or Ruby.\n\n#### Silver bullet\n*"Oh look what he\'s done in this last chapter, he\'s trolling Java!"* Maybe but I just wanted to prove that Java, like Ruby (and Rails) are not the silver bullet that solves every problem.\nI could go on about Java, even though I know very little about it and not be that far from the truth. I mean, the [article](http://ocpsoft.org/opensource/javascript-is-the-new-perl/) that started the discussion with @JBossMike is referring CoffeeScript replacing JavaScript. Like Scala is replacing Java?\n*"Java is a strongly-typed language so it\'s more maintainable and failure-proof"* I\'ve worked several years with very talented C/C++ developers and they still had much more difficulties refactoring their apps than me with my MVC framework written in PHP. Strongly-typed has *nothing* to do with code quality or maintainability.\nIt happens I\'m reading [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) again. All the examples are in Java but I can\'t remember an occurrence where Uncle Bob refers to Java being strongly-typed having anything to do with writing clean code.\n\n#### You\'re not your code, you\'re not your language!\nYou know why Cassandra or Hadoop are written in Java? Because they\'re developed by better developers!\n\nYes they\'re better developers, more experienced, more trained, more schooled. But they\'re not better because they use Java. Those guys just tend to have learned Java early in their career and feel comfortable using it.\n\nBut you know what? Two of the best developers I know are not Java developers (I mean Java is not their prefered language). Fabien Potencier is the creator of the Symfony project (among other PHP projects) and Douglas Crockford created JSON and wrote the most educating book about JavaScript: [JavaScript: The Good Parts](http://shop.oreilly.com/product/9780596517748.do).\n\nThe language you\'re using doesn\'t tell me how good a developer you are. That\'s not because you\'re a Java developer or a Ruby developer that you know better than Fabien or Douglas about anything.\nActually it\'s more impressive for someone to master a flawed language (and PHP, JavaScript, Perl are majorly flawed) than to master strong languages such as Java.\n\n#### To DHH and Mike Brock\nFinally, to answer directly to DHH and Mike Brock, I know why you took some time to argue with me on this topic. You, more than others, invested *a lot* in your respective language and you have all the reasons in the world to try to convince people it is better than PHP, Python, JavaScript or Perl. Lincoln\'s article is just about proselytising Java.\nThe more people you convince other languages suck, the more product/expertise in your preferred language you\'re gonna sell to them.\n\nBut face it guys.\nPHP powers much more web sites than Ruby and Java:\n<div style="text-align:center;"><a href="http://w3techs.com/technologies/overview/programming_language/all">\n![Server Side Programming Languages](/images/2015/02/server_side_programming_languages.png)\n</a></div>\nAnd against the odds - and Java applets, VBScript and Flash - JavaScript, as flawed as it is, is the de-facto browser\'s language (I\'m not convinced yet it\'s an appropriate server-side language but node.js and SilkJS are promising).\n\nYour languages are strong but not *that* strong.\n\n#### That\'s all trolls!\nThat\'s the last time I\'ll spend time on this holy war of languages. We got the same argument with web browsers and operating systems before that. And actual religions before that.\n\nPeople tend to take offense when you criticise their preferred language the same way they\'d take offence if you criticised their culture or religion. So don\'t do it, that\'s petty, mean and counter-productive.\n\nYou\'d better spend your time developing great apps instead, whatever language you use.\n'},"8e92":function(e){e.exports=[["2011-02-22-mixing-up-tdd-phpunit-namespaces-and-jenkins",{title:"Mixing up TDD, PHPUnit, Namespaces and Jenkins",date:"2011-02-22 11:00:00",tags:["development","old-blog","php","tdd"],id:"2011-02-22-mixing-up-tdd-phpunit-namespaces-and-jenkins"}],["2011-06-18-filtering-a-phar-content",{title:"Filtering a Phar content",date:"2011-06-18 10:00:00",tags:["development","old-blog","php"],id:"2011-06-18-filtering-a-phar-content"}],["2011-08-25-recent-php-discoveries",{title:"Recent PHP discoveries",date:"2011-08-25 10:00:00",tags:["development","old-blog","php"],id:"2011-08-25-recent-php-discoveries"}],["2011-10-06-rip-steve-jobs",{title:"RIP Steve Jobs",date:"2011-10-06 10:00:00",tags:["steve-jobs","apple"],id:"2011-10-06-rip-steve-jobs"}],["2011-12-10-my-journey-with-ruby",{title:"My journey with Ruby",date:"2011-12-10 11:00:00",tags:["development","old-blog","ruby"],id:"2011-12-10-my-journey-with-ruby"}],["2011-12-18-a-quick-ruby-port",{title:"A quick Ruby port",date:"2011-12-18 11:00:00",tags:["development","old-blog","ruby"],id:"2011-12-18-a-quick-ruby-port"}],["2012-01-01-vim",{title:"Vim",date:"2012-01-01 11:00:00",tags:["development","old-blog","vim"],id:"2012-01-01-vim"}],["2012-04-10-good-and-bad-languages",{title:"Good and bad languages",date:"2012-04-10 10:00:00",tags:["development","old-blog","php"],id:"2012-04-10-good-and-bad-languages"}],["2012-06-07-anonymous-classes-in-php",{title:"Anonymous classes in PHP",date:"2012-06-07 10:00:00",tags:["development","old-blog","php"],id:"2012-06-07-anonymous-classes-in-php"}],["2012-07-13-should-i-test-accessors",{title:"Should I test accessors?",date:"2012-07-13 10:00:00",tags:["development","old-blog","tests"],id:"2012-07-13-should-i-test-accessors"}],["2012-10-11-tdd-bdd-potato-potatoe",{title:"TDD, BDD, Potato, Potatoe",date:"2012-10-11 10:00:00",tags:["development","old-blog","tdd","bdd","tests"],id:"2012-10-11-tdd-bdd-potato-potatoe"}],["2012-11-11-how-i-set-up-my-development-environment-on-mac",{title:"How I set up my development environment on Mac",date:"2012-11-11 11:00:00",tags:["development","old-blog","php","mac","zsh","intellij-idea"],id:"2012-11-11-how-i-set-up-my-development-environment-on-mac"}],["2013-01-05-its-more-scallable",{title:"‟It's More Scallable”",date:"2013-01-05 11:00:00",tags:["development","old-blog","php"],id:"2013-01-05-its-more-scallable"}],["2013-01-14-partial-mocks-with-mockery",{title:"Partial mocks with Mockery",date:"2013-01-14 11:00:00",tags:["development","old-blog","php","mockery"],id:"2013-01-14-partial-mocks-with-mockery"}],["2013-02-10-development-environments-with-vagrant",{title:"Development environments with Vagrant",date:"2013-02-10 11:00:00",tags:["development","old-blog","vagrant"],id:"2013-02-10-development-environments-with-vagrant"}],["2013-11-01-how-to-dynamically-localize-angularjs",{title:"How to dynamically localize AngularJS",date:"2013-11-01 11:00:00",tags:["development","angularjs","jquery","javascript","old-blog"],id:"2013-11-01-how-to-dynamically-localize-angularjs"}],["2014-12-22-about-the-star-wars-episode-vii-teaser-trailer",{title:"About the Star Wars Episode VII teaser trailer",date:"2014-12-22 11:00:00",tags:["geek","star-wars","movies","trailer","teaser","stormtrooper","may-the-force-be-with-you"],id:"2014-12-22-about-the-star-wars-episode-vii-teaser-trailer"}],["2014-12-22-joe-cocker",{title:"Joe Cocker",date:"2014-12-22 21:22:00",tags:["joe-cocker","woodstock"],id:"2014-12-22-joe-cocker"}],["2014-12-24-my-quest-to-the-perfect-headphones",{title:"My quest to the perfect headphones",date:"2014-12-24 14:13:00",tags:["headphones","bose","sennheiser","akg","audio-technica","fiio"],id:"2014-12-24-my-quest-to-the-perfect-headphones"}],["2015-01-19-transcoding",{title:"Transcoding",date:"2015-01-19 17:00:00",tags:["geek","video","transcoding","plex","handbrake","don-melton","bluray","dvd"],id:"2015-01-19-transcoding"}],["2015-05-04-gibson-sg-customization",{title:"Gibson SG customization",date:"2015-05-04 08:31:19",tags:["gibson","guitar","customization","hardware","pickup-rings","knobs","pickup-selector-ring","fender","noiseless","stratocaster"],id:"2015-05-04-gibson-sg-customization"}],["2016-12-02-macbook-pro-2016-issues",{title:"MacBook Pro Late 2016 - Some issues",date:"2016-12-02",id:"2016-12-02-macbook-pro-2016-issues"}]]},"8eb1":function(e,t){e.exports="Joe Cocker died today. This makes me sad but my father is probably even more sad. A decade or two ago, he went to one of his concert. For years, he couldn't shut up about it. Until he saw Pink Floyd (again, without me) for their last tour. That's the one I'm more pissed about but that's not the topic of this post.\n\nSo, he couldn't shut up about it... Every time he saw or heard a singer, he would compare him to Joe. He would always say how much Joe Cocker was a beast on scene, giving everything. He would even mimic Joe's air guitar playing. My Dad's whole music culture starts with Woodstock (it doesn't end there though) so Joe was a big deal.\n\nI have the same fondness for Joe Cocker. *[With a little help from my friends](https://www.youtube.com/watch?v=bRzKUVjHkGk)*, *[Unchain my heart](https://www.youtube.com/watch?v=Tpz1Rsiw0AU)*, *[You can leave your hat on](https://www.youtube.com/watch?v=jOotsq4soug)*, *[The letter](https://www.youtube.com/watch?v=4RnjWLVyMps)*, *[You are so beautiful](https://www.youtube.com/watch?v=WR5_oiayAew)*, they're all classics.\n\nBut my favorite is *Delta Lady*\n<iframe width=\"854\" height=\"510\" src=\"https://www.youtube.com/embed/5Yo9EvSCHlY\" frameborder=\"0\" allowfullscreen></iframe>\n\nRIP Joe.\n"},"99ee":function(e,t){e.exports="**ARCHIVE**\n\nIf you don't like regular expressions or if they're not enough, take a look at [this](https://gist.github.com/1032868).\n\nIf you don't know what Phars are, it's [here](http://us.php.net/manual/en/book.phar.php).\n"},a43d:function(e,t){e.exports="I'm gonna start with a bit of background leading to the purchase of the guitar. Scroll down to go directly to the customization part.\n\n### Purchase\nLast year, in 2014, I bought my first Gibson guitar. As you may know, buying a Gibson guitar is kind of a big deal because they're expensive. They're really good but not cheap. They're made in the USA, partly by hand and it's a legendary brand, used by players like Led Zeppelin's Jimmy Page, Guns & Roses' Slash or AC/DC's Angus Young.\n\nMy first guitar was a really cheap asian Les Paul clone that I sold within a year after I got it to buy an Epiphone G400, the asian-made version of a Gibson SG. So, I mostly learned to play the guitar on an SG-like guitar. I later bought a US Fender Stratocaster and an emulation guitar built by Line 6.\n\nSo, last year, I finally got the budget to buy my first real Gibson. So, I started research on Gibson Les Pauls. I mean if you want to buy a Gibson, your instinct is to go for the flagship, the Les Paul. Based on my budget, I decided I'd buy an 2014 LPM. I went to a shop to try it and it was a major disappointment, the sound was dull, a bit mushy and the finish was not really good. Right next to it was a 2014 SG Special. It's one step up in the range, the equivalent of the Les Paul Studio. But SGs are cheaper than Les Pauls so the SG Special was only a bit more expensive than the LPM. And, OMG, the sound was 10 times better. It has proper covered humbuckers instead of zebras. It has 24 accessible frets and on top of that, it has coil-splits. I'm pretty sure that the SG Special had the most value of all the Gibson 2014 range. In 2015, they changed the pickups to zebras and removed the coil-splits, making it a lot less interesting IMO.\nAlso, I'd like to thank [GuitarShop](http://www.guitarshop.fr) for selling me the guitar at the price they bought it and not the price it was on the catalog (Gibson prices went up during 2014, at least in France).\n\nSo I bought a Gibson SG Special 2014 in the Walnut finish. The only thing I dislike about the SG Special/LP Studio is that \"Dark Cream\" color they have for the hardware. So, last month, for a small price, I bought black hardware, official Gibson parts and installed them.\n\n### Customization\n![before-after](/images/2015/05/IMG_6388.jpg)\n\nIt's quite easy to do if you take some precautions. First, I used a yoga mat under the guitar (that red/pink color you see in the picture above). I also used a piece of cloth to put on the table of the guitar when I worked on the pickups to avoid scratches.\n\nThen I started by removing the strings and unscrewed the 4 corner screws of the neck pickup. I also decided to take pictures of how everything was for future reference.\n\n![Neck pickup](/images/2015/05/IMG_6344-1.jpg)\n\nAs you can see in this image, the pickup is fixed to the pickup ring with 2 screws and springs. Before touching those, I used some cutouts from the parts packaging to mark the pickup height setting:\n\n![](/images/2015/05/IMG_6352.jpg)\n\nPutting back the screws with the springs is the hardest part of this customization, it's a bit tricky, especially on the neck pickup where the lead to the pots doesn't leave a lot for room to work with. That's where the piece of cloth I mentioned comes handy. Otherwise, I would have scratched the finish of the guitar. Using the cutouts, I set the pickup height where it was and used the black screws coming with the new rings to put the 2 pickups in place. Those screws were a bit longer but they worked just fine. Also, don't mix up the rings. Due to the neck angle, the bridge pickup ring is higher than the neck one.\n\nFor the pickup selector ring, you need to remove the electronics plate behind because you want to hold the internal part while you unscrew the ring. Otherwise you might break a solder point.\n\nFor the knobs, you can remove them by hand. If you don't have enough space or it's hard to remove, you can wrap a piece of cloth under the knob and pull the cloth. Try to pull it straight up otherwise you might damage the knob if you want to reuse it later. Also, if the new knobs don't stay in place, you can use a large screw driver to widen the space between the pegs of the pot.\n\nMy next customization project is bit more ambitious. I'm gonna install noiseless pickups on my US Strat.\n"},accd:function(e,t){e.exports='**ARCHIVE**\n\nI already twitted about it but it\'s worth repeating as I got the same discussion a couple of days ago. TDD and BDD are not the same thing but TDD and BDD frameworks are often the same thing.\n\n<blockquote class="twitter-tweet tw-align-center"><p>TDD=unit tests, BDD=end-to-end tests. You can do TDD with BDD frameworks but don’t call it BDD like here: <a href="http://t.co/0VuKLfZQ" title="http://www.slideshare.net/bmabey/the-why-behind-tddbdd-and-the-how-with-rspec">slideshare.net/bmabey/the-why…</a> (cc @<a href="https://twitter.com/damln">damln</a>)</p>&mdash; Simon Jodet (@sjodet) <a href="https://twitter.com/sjodet/status/237544589085511680" data-datetime="2012-08-20T13:40:18+00:00">August 20, 2012</a></blockquote>\n<script src="//platform.twitter.com/widgets.js" charset="utf-8"><\/script>\n\nTDD (_Test Driven Development_) is a programming methodology that produces unit tests. They automatically test **units** as in methods or functions. They\'re a developer\'s tool.\nBDD (_Behavior Driven Development_) is a programming methodology that produces behavioral tests also called automated tests. They automatically test the program\'s **behavior**. They\'re a tester and developer\'s tool.\n\nBoth behavioral tests and unit tests are automated. That\'s why most BDD frameworks and TDD frameworks are interchangeable. One example: [Jasmine](http://pivotal.github.com/jasmine/) is a JavaScript BDD framework that can be used solely for TDD if you want to. It has a [Gherkin](https://github.com/cucumber/cucumber/wiki/Gherkin)-like syntax, used in BDD but is low-level enough to do TDD.\n\nAnd nothing prevents you to use a xUnit framework to write and execute behavioral tests.\n\nSo that\'s not because you\'re using PHPUnit that you\'re doing TDD and don\'t call it BDD when you\'re testing methods. Strictly speaking, you\'re testing the methods\' *behavior* but it\'s just confusing.\n\nOh and one last thing: `(TDD != BDD) == true` but `(TDD > BDD) == false` and `(TDD < BDD) == false`.\n\n\n**PS**: *Yes I know I misspelled "Potatoe" in the title here on purpose... Geez, it\'s a reference to a [Louis Amstrong\'s song](http://www.youtube.com/watch?v=J2oEmPP5dTM&t=50s).*\n'},ace9:function(e,t){e.exports="#### Update 09/12/2016 (or 12/09/2016 if you're in the US)\nSo I definitely gave up on the \"1-cable dream\". Instead, here's my new cable setup. I'm using a [USB-C/Thunderbolt 3 to DisplayPort adapter](http://amzn.eu/9KOoZeq) for 4k/60Hz video and the [USB-C Digital AV Multiport Adapter](http://www.apple.com/shop/product/MJ1K2AM/A/usb-c-digital-av-multiport-adapter) from Apple. In it are plugged my USB 3 hub and the Apple USB-C power cable plugged on the power brick. That way, I don't get that weird charging-but-not-really-charging bug anymore because the MacBook Pro doesn't get confused anymore on where to draw power from.\nAnother benefit from the setup is that the MacBook Pro seems to be much more stable. I don't get weird reboots after sleep (it happened 2 or 3 times before I switch to this setup).\n\nI'm pretty sure the MacBook Pro is suffering from being the first main-stream device with USB-C/Thunderbolt 3 ports. For now, you have to find the correct combination of cables so the power, USB/Thunderbolt and video drivers don't collide. I really hope that's not the future of USB-C/Thunderbolt 3...\n\n#### Original post\n<img src=\"/images/2016/12/macbook.jpg\" style=\"float:left;margin-right: 20px;margin-bottom: 10px;\">\nI just bought the [new MacBook Pro](http://www.everymac.com/systems/apple/macbook_pro/specs/macbook-pro-core-i5-3.1-13-late-2016-retina-display-touch-bar-specs.html). I chose the 13\" TouchBar model with a RAM, CPU and SSD upgrade.\nSo definitely not a cheap machine. It's for a new job I'm starting in January and my future employer paid for it.\n\nAll in all, I'm very pleased with my choice. First, I come from an [old big non-retina MacBook Pro](http://www.everymac.com/systems/apple/macbook_pro/specs/macbook-pro-core-i5-2.5-13-mid-2012-unibody-usb3-specs.html) at home and a cheap and crappy Dell Windows laptop at work. So there is a big leap in terms of performance, build quality and display. Also, it's genuinely a great machine. That TouchBar and that TouchID button. Also, I love the keyboard.\n\nBut I'm very surprised and displeased by how much problems I have with it right now.\n\n### Cables\nFirst, the cables. No, not the dongles, the cables. I bought an [LG 27UD88-W display](http://www.lg.com/us/monitors/lg-27UD88-W-4k-uhd-led-monitor). This model was not specifically designed for the MacBook Pro like the UltraFine models but it's supposed to work fine with the MacBook so I figured it would work fine with the MacBook Pro.\nWell, I was wrong! This model has 2 USB 3 ports. With USB-C cable and 60W power supply, I was hoping to live the 1-cable dream, using the display as an USB hub for my peripherals and as a power supply for the MacBook Pro.\n\nI tried the USB-C cable that comes with the display. I got the display signal working but no power and no USB 3. It seems this cable is not suitable for high power supply.\n\nThen I tried the USB-C cable coming with the MacBook Pro. I got power but no display and still no USB 3. Looks to me this cable is not a Thunderbolt cable and doesn't support display signal. Actually, [it's not even USB 3](http://blog.fosketts.net/2016/10/30/2016-macbook-pro-usb-cthunderbolt-survival-guide/).\n\nAfter some research, I bought a [Cable Matters Thunderbolt 3 (20 Gbps) / USB-C 3.1 Gen 2 (10 Gbps) cable](http://amzn.eu/ivlZm94) from Amazon for 26€. So now I have display signal and power (sort of) but still no USB 3. So I gave up on the 1-cable dream and use a USB-C to USB 3 adapter from Apple for my peripherals. I also tried to use the [USB-C Digital AV Multiport Adapter](http://www.apple.com/shop/product/MJ1K2AM/A/usb-c-digital-av-multiport-adapter) from Apple but the 4K display is capped at 30Hz which is unacceptable for me.\nOh I said \"sort of\" for the power because sometimes I will hear the sound indicating the MacBook Pro is charging, the icon in the taskbar will show I'm plugged in but if I click on it, I'll see the MacBook Pro is not charging and the battery depletes slowly. Unplugging and plugging again will usually solve the issue.\n\nIf somebody can tell me if there is a magic cable that works reliably for my use case, please tell me on Twitter!\n\n### Bugs\nI've already noticed quite a few bugs.\n\nThe most annoying one has to do with password typing with FileVault activated. I have a french keyboard layout configured but I can't use an \"@\" sign in my password. Password check won't work. I have no idea what characters it types but definitely not an \"@\" sign. The rest of the keys seems to match the AZERTY layout of my french keyboard. The weirdest thing is that if I use a bluetooth keyboard, it works. So it's the key mapping of the integrated keyboard that is faulty. My solution was to choose another password without that sign.\n\nAnother bug is that if I boot the MacBook Pro with the external display plugged in, I have a big display glitch with quickly flicking windows from both screens showing on the MacBook Pro display and nothing on the external display.\n\nFinally, sometimes the TouchBar doesn't update when I switch apps. No idea why and it's totally random.\n\n\nTo summarize, the MacBook Pro 2016 has a lot of early issues. I'm a software engineer with a pretty good knowledge of Apple hardware and I still struggle to understand exactly what I can and can't do with USB-C/Thunderbolt 3 ports and cables. The only information that matches my experience is this [\"Survival guide\"](http://blog.fosketts.net/2016/10/30/2016-macbook-pro-usb-cthunderbolt-survival-guide/). The title is not exaggerated...\n"},b648:function(e,t){e.exports="**ARCHIVE**\n\n__Trim__\n\nI just discovered that the [trim](http://us.php.net/manual/en/function.trim.php \"trim documentation\") function I've been using for so long to remove whitespaces around strings can also remove any other character. I've been cleaning _by hand_ those path items of possible trailing slashes for so long...\n\n__Curl issue with PHP 5.3.8__\n\nI've encountered an issue on a project after updating to PHP 5.3.8 (the dotdeb package on Debian).\nIf you're calling a HTTPS domain with a self-signed certificate, `CURLOPT_SSL_VERIFYPEER` to 0 is not enough anymore. `CURLOPT_SSL_VERIFYHOST` should be also set to 0.\n\n__HEAD stop__\n\nAccordind to [this](https://students.mimuw.edu.pl/~ai292615/php_head_trick.pdf), calling PHP with the HEAD http method will make stop execution on the first output. This is potentially dangerous and a security breach.\n\n__British PHP__\n\nWhat would have happened if PHP had been invented by some British chap? The answer is [here](http://www.addedbytes.com/blog/if-php-were-british/).\n"},cf4c:function(e,t){e.exports='**ARCHIVE**\n\nI thought the other day I should share how I setup my development environment on OS X. It\'ll serve as a reminder for me too.\n\nThe first part is language-agnostic but the second part focuses on PHP.\n\n### Install [Homebrew](http://mxcl.github.com/homebrew/):\n\n```language-bash\nruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"\n```\n\n\n### Install ZSH and [Oh My Zsh](https://github.com/robbyrussell/oh-my-zsh):\n\n\n```language-bash\nbrew install zsh zsh-completions\ncurl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh\n```\n\n### Configure ZSH `mate ~/.zshrc`:\nSome notes here:\n\n* I changed the default theme to "af-magic" ( `ZSH_THEME="af-magic"` )\n* I\'ve added the fpath command as told by the "zsh-completions" brew\n* Activated and added some alias\n* Added some plugins related to the tools I most often use\n* **Important**: I\'ve changed the path so `/usr/local/bin` and `/usr/local/sbin` are upfront. Otherwise system binaries will be used instead of homebrew binaries (you get OS X\'s php binary instead of the homebrew one).\n\n```language-bash\n# Path to your oh-my-zsh configuration.\nZSH=$HOME/.oh-my-zsh\n\n# Set name of the theme to load.\n# Look in ~/.oh-my-zsh/themes/\n# Optionally, if you set this to "random", it\'ll load a random theme each\n# time that oh-my-zsh is loaded.\nZSH_THEME="af-magic"\n\n# Completion\nfpath=(/usr/local/share/zsh-completions $fpath)\n\n# Example aliases\nalias zshconfig="mate ~/.zshrc"\nalias ohmyzsh="mate ~/.oh-my-zsh"\nalias la="ls -la"\n\n# Set to this to use case-sensitive completion\n# CASE_SENSITIVE="true"\n\n# Comment this out to disable weekly auto-update checks\n# DISABLE_AUTO_UPDATE="true"\n\n# Uncomment following line if you want to disable colors in ls\n# DISABLE_LS_COLORS="true"\n\n# Uncomment following line if you want to disable autosetting terminal title.\n# DISABLE_AUTO_TITLE="true"\n\n# Uncomment following line if you want red dots to be displayed while waiting for completion\n# COMPLETION_WAITING_DOTS="true"\n\n# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)\n# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\nplugins=(git brew composer git-flow github node npm osx textmate)\n\nsource $ZSH/oh-my-zsh.sh\n\n# Customize to your needs...\nexport PATH=/usr/local/bin:/usr/local/sbin:/usr/local/git/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/X11/bin\n```\n\n### Install the github gem\nJust use Homebrew:\n```language-bash\nsudo gem install github\n```\n\n### What about HTTP and database servers?\nThat\'s right, how do I install Apache (or nginx)? How do I setup MySQL (or PostgreSQL)?\n\nWell I don\'t. I don\'t like adding listening services on my Mac. It\'s a security concern I don\'t want to bother myself with.\nSo either I use PHP\'s 5.4 built-in web server + SQLite databases or I use a debian/ubuntu virtual machine, something I only run when I\'m coding. The virtual machine setup also limit what you expose to the outer world. Your mails and other personal stuff are isolated.\nAnother reason why I use a virtual machine is that my production servers will use Linux, not Mac OS and you should do development and continuous integration on the production system.\n\n### Install PHP\n\n* Tap the PHP repository formula\n\n```language-bash\nbrew tap homebrew/dupes\nbrew tap josegonzalez/homebrew-php\n```\n\n* I suggest you take a look at the options before installing PHP:\n\n```language-bash\nbrew options php54\n```\nI usually use `--with-pgsql`, `--with-mysql`, `--with-suhosin`, `--with-fpm`, `--with-intl`.\n\nNow add the following path to your PATH (in the `~/.zshrc` file): `$(brew --prefix php54)/bin`\n```language-bash\nexport PATH=/usr/local/bin:/usr/local/sbin:/usr/local/git/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/X11/bin\n```\nbecomes\n```language-bash\nexport PATH=$(brew --prefix php54)/bin:/usr/local/bin:/usr/local/sbin:/usr/local/git/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/X11/bin\n```\nThis will make php binaries such as `phpunit` available.\n\n### Install PHPUnit\n\n```language-bash\nchmod -R ug+w `brew --prefix php54`/lib/php\npear config-set php_ini /usr/local/etc/php/5.4/php.ini\npear config-set auto_discover 1\npear update-channels\npear upgrade\npear install pear.phpunit.de/PHPUnit\nbrew unlink php54\nbrew link php54\n```\nThe first command is to make it so you don\'t have to use `sudo` when you install PEAR packages.\n\n### Install Composer\nJust use Homebrew:\n```language-bash\nbrew install composer\n```\n\n### Bonus: IntelliJ IDEA PHP project setup\nA nice little tip if you\'re an IntelliJ IDEA user: go to Preferences (cmd+,)/Project Settings/PHP/Include path and add (with the `+` button) the following path: `/usr/local/opt/php54/lib/php/PHPUnit`.\nAutocompletion for PHPUnit should now work. Do the same with any other system-wide PHP library you\'d like to use.\n'},d99c:function(e,t,o){},e12b:function(e,t){e.exports='In the days since the teaser trailer [^1] for *Star Wars: The Force Awakens* came out, I\'ve read and heard (on podcasts mostly) a lot of stuff. Just to clarify some things:\n\n* To people asking why there are Stormtroopers in this film if the Empire was defeated, 2 things:\n  * The Empire probably didn\'t disappeared completely. Some generals with some authority probably went rogue.\n  * The Stormtroopers were the army of the senate, the republic originally. So even though it could be confusing for non-fans, the new republic (spawned from the rebel alliance) may have used the same uniforms they were using before the empire.\n\n* At some point between episode III and IV, clones would have died of old age or retire. 19 years (the age of Leia and Luke in Episode IV) is long for a clone that ages faster than regular people. So [John Boyega](http://www.imdb.com/name/nm3915784/)\'s character can be a Stormtrooper, not just a guy disguised as a Stormtrooper.\n\n* A Stormtrooper can be black. Not because it would be racist to say otherwise, not because we\'re in a different era, black president, etc. That would be a very good reason but that\'s not the correct one. A Stormtrooper can be black because Stormtroopers, since the Emperor won, are [conscripts](http://en.wikipedia.org/wiki/Conscription), not clones. Given the number of worlds is Star Wars\' galaxy, you would assume some populations are black and the Empire recruits on those worlds.\n\n* <img src="/images/2015/02/Star-Wars-7-The-Force-Awakens-Sith-Lightsaber-Photo-300x126.jpg" alt="Star-Wars-7-The-Force-Awakens-Sith-Lightsaber-Photo" width="300" height="126" style="float:right;"/> The light saber. First, let me just say this: it looks badass! Yeah, a lot of people made fun of it but I like it. Regarding the cross guard, it looks to me like exhausts more than a cross guard. The fact that the blade looks like a flame makes more sense to me than light because photons don\'t just disappear... Yeah I\'m applying logic to a fictional object, sorry.\n\n\n[^1]: If you lived in a cave at the time\n<iframe width="854" height="510" src="https://www.youtube.com/embed/erLk59H86ww" frameborder="0" allowfullscreen></iframe>\n'},ec07:function(e,t){e.exports='**ARCHIVE**\n\n<img src="/images/2015/02/vagrant.jpg" style="float:right">\nAs promised on Twitter, I\'m going to explain how I\'m now using [Vagrant](http://www.vagrantup.com/) to develop Gitrepos instead of running it on my development Macbook Air.\n\n#### Technical debt\nAgainst my better judgment, I started developing Gitrepos on my Mac without bothering with creating an Ubuntu VM running on VMWare Fusion as I did for other projects in the past. At the time, I figured that if I used the correct libraries and abstracting my code enough, I could develop with PHP built-in server and SQLite. I already wrote here that I don\'t like running servers on my Mac for 2 reasons:\n\n* It\'s a security risk I don\'t want to be bothered with. I don\'t want to check the servers are protected behind my firewall, I don\'t want to keep them up to date. I\'m way too <span style="text-decoration: line-through;">lazy</span> busy for that.\n* It doesn\'t make a sense because I\'m using Mac OS to develop but I certainly won\'t run my code on this OS in production. So why bother trying to mimic a production environment when it will never be the same: different versions, different configuration, different performances, everything actually a bit different...\n\nWhile I was working on Gitrepos, I had this nagging feeling that I should start testing it on a production-like environment ASAP. I was sure I was building [technical debt](http://techcrunch.com/2013/02/09/technical-debt-will-kill-you/) and, guess what, I was...\n\n<blockquote class="twitter-tweet" align="center" data-cards="hidden"><p>In this commit (<a href="https://t.co/hwFQEVJq" title="https://github.com/simonjodet/gitrepos/commit/1697136112fbde2463d040a392569e3a44468d5b">github.com/simonjodet/git…</a>) I\'ve switched my dev environment to a vagrant VM. PHP server -&gt; Apache, SQLite -&gt; MySQL...</p>&mdash; Simon Jodet (@sjodet) <a href="https://twitter.com/sjodet/status/299939650649333760">February 8, 2013</a></blockquote>\n<script async src="//platform.twitter.com/widgets.js" charset="utf-8"><\/script>\n<blockquote class="twitter-tweet" align="center"><p>...I found out Apache changes exotic HTTP codes such as 230 into 500 and that "keys" is a reserved word for MySQL but not for SQLite.</p>&mdash; Simon Jodet (@sjodet) <a href="https://twitter.com/sjodet/status/299939663957864448">February 8, 2013</a></blockquote>\n<script async src="//platform.twitter.com/widgets.js" charset="utf-8"><\/script>\n\n#### Enters Vagrant\nThen the other day, I went through my (very long) [Pocket](http://getpocket.com/) list and took a look at Vagrant. I mainly use Pocket as note pad/todo list and I had flagged Vagrant as something I should take a look at. It looked exactly as the best solution to solve my environment problem.\n\nBut I used VirtualBox in the past and I remember it being a PITA to setup, especially the folder sharing stuff. So I gave Vagrant a try, almost convinced it would failed. But it didn\'t!\n<blockquote class="twitter-tweet" align="center"><p>I\'m amazed how little hassle it is to use Vagrant: in 2 hours, I\'ve created a base box from scratch and setup Chef to create a LAMP server</p>&mdash; Simon Jodet (@sjodet) <a href="https://twitter.com/sjodet/status/299471302404763648">February 7, 2013</a></blockquote>\n<script async src="//platform.twitter.com/widgets.js" charset="utf-8"><\/script>\n\nI eventually dumped Chef to use a basic [shell script](https://github.com/simonjodet/gitrepos/blob/150ec043f066f4be63a582bace7ba2fb1ae18640/deploy/deploy.sh) though:\n\n```language-bash\n#!/bin/sh\necho mysql-server mysql-server/root_password select "vagrant" | debconf-set-selections\necho mysql-server mysql-server/root_password_again select "vagrant" | debconf-set-selections\napt-get install -y mysql-server apache2 php5 libapache2-mod-php5 php5-mysql\nVHOST=$(cat &lt;&lt;EOF\n&lt;VirtualHost *:80&gt;\n  DocumentRoot "/vagrant/web"\n  ServerName localhost\n  &lt;Directory "/vagrant/web"&gt;\n    AllowOverride All\n  &lt;/Directory&gt;\n&lt;/VirtualHost&gt;\nEOF\n)\necho "${VHOST}" &gt; /etc/apache2/sites-enabled/000-default\nsudo a2enmod rewrite\nservice apache2 restart\nmysql -u root -p"vagrant" -e ";DROP DATABASE test;DROP USER \'\'@\'localhost\';CREATE DATABASE gitrepos;GRANT ALL ON gitrepos.* TO gitrepos@localhost IDENTIFIED BY \'gitrepos\';GRANT ALL ON gitrepos.* TO gitrepos@\'%\' IDENTIFIED BY \'gitrepos\'"\nsed -i \'s/127.0.0.1/0.0.0.0/g\' /etc/mysql/my.cnf\nservice mysql restart\napt-get clean\n```\nGoing through this script quickly:\n\n* I pre-configure MySQL so `apt-get` runs silently and set the correct passwords\n* I create a basic virtual host file for Apache\n* I configure MySQL so I can query it from the host\n* Some cleaning\n\nAnd here\'s my `Vagrantfile`:\n\n```language-ruby\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nVagrant::Config.run do |config|\n  config.vm.box = "ubuntu_server_12_10_amd64"\n  config.vm.network :hostonly, "192.168.242.2"\n  config.vm.provision :shell, :path => "deploy/deploy.sh"\nend\n```\n\nAs you may have noticed I don\'t use a NAT network for my VM but a "Host-Only" network so I have a fixed IP that is only accessible from the host it\'s running on. That way I don\'t expose my application to the outer world.\n\nBut I have 2 issues with Vagrant:\n\n* I\'d like a provisioner that let me upload a file to the VM during setup. [It\'s coming soon](https://twitter.com/sjodet/statuses/299554780467052544).\n* I didn\'t look hard but I\'d like a repository of [base boxes](http://docs.vagrantup.com/v1/docs/base_boxes.html) I can really trust.\n\nI\'m not a paranoiac but since I worked for a security company, I smell a security issue here. Gitrepos\' code is [public](https://github.com/simonjodet/gitrepos) but I wouldn\'t trust a base box built by an unknown 3rd-party for private code. It\'s way too easy to make one that would leak code.\n\nSo I decided to build my own Ubuntu Server 12.10 amd64 base box.\n<a href="{{ page.location }}#read_more" class="read_more"><strong>Read more...</strong></a>\n\n#### Build your own base box\n\n##### Creating the VM\n\nFirst, you\'ll need to install [Virtualbox](https://www.virtualbox.org/wiki/Downloads) and download the [Ubuntu Server image](http://www.ubuntu.com/download/server).\n\nIn a few screenshots, here\'s how to start the setup:\n<img src="/images/2015/02/setup_01.png" align="center"/><br>\n<img src="/images/2015/02/setup_02.png" align="center"/><br>\n<img src="/images/2015/02/setup_03.png" align="center"/><br>\n<img src="/images/2015/02/setup_04.png" align="center"/><br>\n<img src="/images/2015/02/setup_05.png" align="center"/><br>\n<img src="/images/2015/02/setup_06.png" align="center"/><br>\n<img src="/images/2015/02/setup_07.png" align="center"/><br>\n<img src="/images/2015/02/setup_08.png" align="center"/><br>\n<img src="/images/2015/02/setup_09.png" align="center"/><br>\n<img src="/images/2015/02/setup_10.png" align="center"/><br>\n\n##### Installing Ubuntu\n\nThe first step of the Ubuntu installer are pretty straight forward and entirely up to you.\n\nThen you get asked for the Hostname. [Vagrant\'s documentation](http://docs.vagrantup.com/v1/docs/base_boxes.html) suggests to follow a convention: `vagrant-[os-name]`, e.g. `vagrant-ubuntu-12-10-amd64` in our case.\n\nThen for the next steps:\n\n* Root Password: `vagrant`\n* Main account login: `vagrant`\n* Main account password: `vagrant`\n\nI don\'t encrypt the disk because we don\'t care in this setup. For partitioning, I use the simplest option, skipping LVM because we want to avoid unnecessary stuff that could impair performance and make the VM larger than necessary.\n\nLet it then install stuff. I don\'t enable automatic updates, it could mess up some test runs, just remember to `apt-get update; apt-get upgrade` once in a while. At the "software selection" step, don\'t check anything, we\'ll take care of that later.\n\nFinally, install Grub with the default options and reboot.\n\n##### Configuring the system\nAt this step, since the VM\'s network uses NAT, you can\'t login through SSH and copy-pasting to the VM is not possible.\n\nLogin as vagrant/vagrant. I\'ve aggregated the different steps in a [bash script](http://blog.jodet.com/uploads/vagrant.sh). Just follow these steps:\n<pre class="prettyprint lang-bash">\ncd /tmp\nwget http://blog.jodet.com/uploads/vagrant.sh\nchmod +x vagrant.sh\nsudo ./vagrant.sh\n</pre>\n\nThe last step is to let the `vagrant` user "sudo" without having to type his password.\n\n<pre class="prettyprint lang-bash">\nsudo chmod 644 /etc/sudoers\nsudo vim /etc/sudoers\n</pre>\n\nAdd `Defaults    env_keep="SSH_AUTH_SOCK"` to the "Defaults" and replace `%admin ALL=(ALL) ALL` by `%admin ALL=NOPASSWD: ALL`.\n\nIt should look like this:\n```language-bash\n#\n# This file MUST be edited with the \'visudo\' command as root.\n#\n# Please consider adding local content in /etc/sudoers.d/ instead of\n# directly modifying this file.\n#\n# See the man page for details on how to write a sudoers file.\n#\nDefaults    env_reset\nDefaults    mail_badpass\nDefaults    secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"\nDefaults    env_keep="SSH_AUTH_SOCK"\n\n# Host alias specification\n\n# User alias specification\n\n# Cmnd alias specification\n\n# User privilege specification\nroot    ALL=(ALL:ALL) ALL\n\n# Members of the admin group may gain root privileges\n%admin ALL=NOPASSWD: ALL\n\n# Allow members of group sudo to execute any command\n%sudo   ALL=(ALL:ALL) ALL\n\n# See sudoers(5) for more information on "#include" directives:\n\n#includedir /etc/sudoers.d\n```\n\nNow you\'re done, just shutdown the system with `sudo shutdown -h now`.\n\n##### Packaging the base box\n\nOpen a terminal, go to the folder containing your VM and run:\n\n```language-bash\ncd VirtualBox\\ VMs/ubuntu_base\nvagrant package --base ubuntu_base\n```\n\nYour new base box is named `package.box`. You can now add it to your system and use it in a project like this:\n\n```language-bash\nvagrant box add vagrant-ubuntu-12-10-amd64 package.box\nmkdir test_environment\ncd test_environment\nvagrant init vagrant-ubuntu-12-10-amd64\nvagrant up\nvagrant ssh\n```\n\nYou can store the package.box file in a safe location and delete the VirtualBox VM if you need space.\n\nSources: [Creating a vagrant base box for ubuntu 12.04 32bit server](https://github.com/fespinoza/checklist_and_guides/wiki/Creating-a-vagrant-base-box-for-ubuntu-12.04-32bit-server) and the [official documentation](http://docs.vagrantup.com/v1/docs/base_boxes.html).\n'},edf6:function(e,t){e.exports="**ARCHIVE**\n\nStill on my journey to learning the Ruby language, I've ported a small PHP script I've written a while ago to quickly eject external drives on my MacBook Pro in Ruby.\n\nI converted it to [an app](/uploads/usb_eject.app.zip) with Automator\n\nHere is the code (MIT license):\n<script src=\"https://gist.github.com/1492740.js?file=usb_eject.rb\"><\/script>\nComments and critics are welcome.\n"},f163:function(e,t){e.exports="**ARCHIVE**\n\nI was in pretty good mood this morning. Then I went to browse my Twitter feed and stumbled upon an article linked by one of the guys I truly admire, [Jeff Atwood](http://www.codinghorror.com/).\n\nThe article I'm talking about is [this one](http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/).\n\nAt that point, I got annoyed. I knew Jeff wasn't a PHP fan. He's free to think what he wants and express it as much as he wants. And [his article](http://www.codinghorror.com/blog/2008/05/php-sucks-but-it-doesnt-matter.html) on the topic is pretty fair.\n\nThe tweeted article is really bad, full of errors that shows how much the guy doesn't know what he's talking about or maybe he just doesn't care to be fair or objective. The article states PHP errors don't have [call stacks](http://php.net/manual/en/exception.gettraceasstring.php). It states PHP has [no constructor and no destructor](http://php.net/manual/en/language.oop5.decon.php). At that point, I just stopped reading. But enough advertisement for this article already. At least, it gave me the urge to write this blog entry - long time no see dear reader =)\n\nA bit of personal history first. I started programming in PHP around 2000 when PHP 3 was still the standard and 4.0.x a novelty not that much supported by French free hosting services.\nI had very little programming experience at that point but still I was able to get a pretty good picture gallery website with MySQL database, pagination, sorting options, etc. in a couple of months.\nOf course, the code was ugly but all I needed at that point was to learn the good practices.\nThe language you use doesn't make you a better programmer. As long as it doesn't prevent good practices, you should use whatever language is easier for you to learn and understand.\n\nI recently had to make the language choice for a brand new personal project. As previous entries in this blog shows, I could have used Python, Ruby or Node.JS. To be honest, I started the project with Rails, switched to Django then played with Node.JS.\nEventually, I stopped experimenting and chose PHP. Why? Because the project would require to be installed on servers I don't have control over. Among PHP, Python, Ruby and Node, what's the most ubiquitous language around in web-hosting solutions? PHP is probably on top. That's why I chose MySQL over other RDBMS/NoSQL solutions by the way.\n\nI was a bit sad to have to resort to PHP again and then I found out (thanks François!) about [Silex](http://silex.sensiolabs.org/). A new feature of PHP 5.3 I didn't noticed previously is heavily used by Silex: closures. Wow! Apart from the fact that my experiences with Node.JS made closures easy for me to understand and use, I realized PHP had made a lot of progress lately.\n\n[Closures](http://php.net/manual/en/class.closure.php) and [Phars](http://www.php.net/manual/en/intro.phar.php) are great additions to PHP.\n\nThat's what make me angry when I read PHP-bashing articles. They see the bad parts and judge only by them, they don't see how much the language progressed over the years. I don't give a f**k about the bad parts. I know them, I avoid them and I only use what is good or great. The same applies to JavaScript, read [Douglas Crockford](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742) and focus on what is great in the language. It's enough.\n\nI wonder how PHP successfully went through 6 major versions (5.3 is what 6.0 should have been IMO). And I'm wondering why Python struggles so much with its 3.0 version adoption rate. Oh maybe it deprecates too much stuff and nobody wants to work that much to switch to 3.0.\nOn the other hand, PHP suffers from not deprecating too much its API: the naming is not consistent. It tends to add to the API instead of replacing, meaning a growing API.\n\nI can do better TDD in PHP, thanks for the somewhat classical OO model of PHP and the closures, allowing for easier and more powerful dependency injection. Python doesn't even have private methods...\nPHP also better fits my need for readable code, Ruby has too much \"magic\" syntax for me. But that part is purely personal preference.\n\nThe last major advantage of PHP is that you can set it up fast for development. You then have a lot of actions possible when going to production to fast things up: going to Nginx and FastFPM, enabling opcode cache (APC), tweaking your php.ini, compiling your own version of PHP or even using [HipHop](https://github.com/facebook/hiphop-php/).\n\nI agree with most stuff Jeff Atwood writes but not this tweet:\n![image](/images/2015/02/jeff_atwood_tweet-png.jpg)\n\nSo please continue to create projects using PHP. And please continue ranting on the bad parts of the language to the community, that'll make it better.\n"},f88c:function(e,t){e.exports="**ARCHIVE**\n\nI've learned a long time ago that PHPUnit mocks suck. Big time. They're just a pain to use.\n\nSo I looked for alternatives. I didn't look for long as a [former colleague](https://github.com/fdussert) of mine is one of the original contributors of [atoum](https://github.com/atoum/atoum).\n\nMaybe because it's younger (and thus requires PHP 5.3 or above), atoum expressiveness is much better than [PHPUnit](https://github.com/sebastianbergmann/phpunit).\nI really like atoum and highly recommend it. However, because it's a young project, I have two problems with it:\n\n* The documentation was really lagging but it's getting there\n* Integration with other tools is poor\n\nThe integration issue for me is really a deal-breaker. I really like to have a green bar in [IntelliJ IDEA](http://www.jetbrains.com/idea/). I sometimes like to check test coverage live in the IDE. <span style=\"text-decoration: line-through;\">There was no Jenkins plugin for atoum (I didn't check lately though).</span>\n**Update:** [atoum works with Jenkins](https://github.com/atoum/atoum/wiki/atoum-et-Jenkins-(ou-Hudson)) as his author [indicates to me](https://twitter.com/mageekguy/status/290863062636969984). And I should have mentioned the [feature request](http://blog.mageekbox.net/?post/2012/11/07/You-use-atoum-and-PhpStorm) for atoum support in IntelliJ IDEA. I signed it and you should too.\n\nAnd then I stumbled on [Mockery](https://github.com/padraic/mockery). Unlike atoum, it doesn't replace PHPUnit, it just replaces its mocking system with a more elegant, powerful and reliable one.\n\nThe big plus of Mockery over PHPUnit is that you don't need to have the class to mock to create a mock. You can start mocking a dependency, test and write your class then later create the dependency class. Oh and try mocking [Demeter chains](https://github.com/padraic/mockery#mocking-demeter-chains-and-fluent-interfaces) with PHPUnit. Good luck!\n\nBut writing partial mocks with Mockery is not obvious. \"What is a partial mock?\" you say? It's mocking some method(s) of a class to test other methods of the same class.\n\nHere's a real life example. Let's say we have a `Database` class with:\n\n* a `dropTable` method to drop a given table\n* a `listTables` method to list existing tables in a given database\n* a `getSchema` method to get the database SQL schema\n\nThose 3 methods will be used to reset (empty it of all data) the database: list tables, delete them then execute the SQL requests of the schema.\nTo me, there is no other logical place for a `reset` method than the `Database` class. That's a typical scenario when you need a partial mock.\n\nHere's the `Database` class:\n\n```language-php\n<?php\n\nclass Database\n{\n    /**\n     * @var \\Doctrine\\DBAL\\Connection\n     */\n    private $conn;\n\n    public function __construct(\\Silex\\Application $app)\n    {\n        $this->conn = $app['db'];\n    }\n\n    public function getSchema($version = null)\n    {\n        //...\n    }\n\n    public function listTables()\n    {\n        //...\n\n    }\n\n    public function dropTable($table)\n    {\n        //...\n    }\n\n    public function reset($version = null)\n    {\n        $tables = $this->listTables();\n        foreach ($tables as $table)\n        {\n            $this->dropTable($table);\n        }\n\n        $schema = $this->getSchema($version);\n        foreach ($schema as $query)\n        {\n            $this->conn->query($query);\n        }\n\n    }\n}\n```\n\nTo create partial mocks, you have to give Mockery the class to mock (so don't create an anonymous mock) and the methods that will be mocked surrounded by square braces:\n\n```language-php\n$Database = \\Mockery::mock('MyClass[methodToMock1,methodToMock2]', array('constructor parameter 1', 'constructor parameter 2'))\n```\n\nYou can also pass some parameters to the mock's constructor. It's especially handy when you need to inject external dependencies.\n\nAnd here's how it's applied to our example:\n\n```language-php\n<?php\n\nnamespace Tests\\UnitTests;\n\nclass DatabaseTest extends PHPUnit_Framework_TestCase\n{\n    //...\n\n    public function test_reset_lists_existing_tables_deletes_them_then_create_a_new_schema()\n    {\n        $app = new \\Silex\\Application();\n\n        $ConnectionMock = \\Mockery::mock('\\Doctrine\\DBAL\\Connection');\n        $ConnectionMock\n            ->shouldReceive('query')\n            ->with('SQL query 1')\n            ->once()\n            ->ordered('reset');\n        $ConnectionMock\n            ->shouldReceive('query')\n            ->with('SQL query 2')\n            ->once()\n            ->ordered('reset');\n        $app['db'] = $ConnectionMock;\n\n        $Database = \\Mockery::mock('\\Database[listTables,dropTable, getSchema]', array($app));\n        $Database\n            ->shouldReceive('listTables')\n            ->once()\n            ->ordered('reset')\n            ->andReturn(array('system', 'users'));\n        $Database\n            ->shouldReceive('dropTable')\n            ->with('system')\n            ->once()\n            ->ordered('reset');\n        $Database\n            ->shouldReceive('dropTable')\n            ->with('users')\n            ->once()\n            ->ordered('reset');\n        $Database\n            ->shouldReceive('getSchema')\n            ->with(1)\n            ->once()\n            ->ordered('reset')\n            ->andReturn(array('SQL query 1', 'SQL query 2'));\n\n        $Database->reset(1);\n    }\n}\n```\n"}});
//# sourceMappingURL=app.9547c715.js.map